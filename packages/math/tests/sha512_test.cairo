use alexandria_math::sha512::{Word64WordOperations, sha512};


fn get_lorem_ipsum() -> Array<u8> {
    let mut input: Array<u8> = array![
        0x4C, 0x6F, 0x72, 0x65, 0x6D, 0x20, 0x69, 0x70, 0x73, 0x75, 0x6D, 0x2C, 0x20, 0x6F, 0x72,
        0x20, 0x6C, 0x73, 0x69, 0x70, 0x73, 0x75, 0x6D, 0x20, 0x61, 0x73, 0x20, 0x69, 0x74, 0x20,
        0x69, 0x73, 0x20, 0x73, 0x6F, 0x6D, 0x65, 0x74, 0x69, 0x6D, 0x65, 0x73, 0x20, 0x6B, 0x6E,
        0x6F, 0x77, 0x6E, 0x2C, 0x20, 0x69, 0x73, 0x20, 0x64, 0x75, 0x6D, 0x6D, 0x79, 0x20, 0x74,
        0x65, 0x78, 0x74, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x69, 0x6E, 0x20, 0x6C, 0x61, 0x79,
        0x69, 0x6E, 0x67, 0x20, 0x6F, 0x75, 0x74, 0x20, 0x70, 0x72, 0x69, 0x6E, 0x74, 0x2C, 0x20,
        0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x20, 0x6F, 0x72, 0x20, 0x77, 0x65, 0x62, 0x20,
        0x64, 0x65, 0x73, 0x69, 0x67, 0x6E, 0x73, 0x2E, 0x20, 0x54, 0x68, 0x65, 0x20, 0x70, 0x61,
        0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x69, 0x73, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
        0x75, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6F, 0x20, 0x61, 0x6E, 0x20, 0x75, 0x6E, 0x6B, 0x6E,
        0x6F, 0x77, 0x6E, 0x20, 0x74, 0x79, 0x70, 0x65, 0x73, 0x65, 0x74, 0x74, 0x65, 0x72, 0x20,
        0x69, 0x6E, 0x20, 0x74, 0x68, 0x65, 0x20, 0x31, 0x35, 0x74, 0x68, 0x20, 0x63, 0x65, 0x6E,
        0x74, 0x75, 0x72, 0x79, 0x20, 0x77, 0x68, 0x6F, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x6F,
        0x75, 0x67, 0x68, 0x74, 0x20, 0x74, 0x6F, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x73, 0x63,
        0x72, 0x61, 0x6D, 0x62, 0x6C, 0x65, 0x64, 0x20, 0x70, 0x61, 0x72, 0x74, 0x73, 0x20, 0x6F,
        0x66, 0x20, 0x43, 0x69, 0x63, 0x65, 0x72, 0x6F, 0x27, 0x73, 0x20, 0x44, 0x65, 0x20, 0x46,
        0x69, 0x6E, 0x69, 0x62, 0x75, 0x73, 0x20, 0x42, 0x6F, 0x6E, 0x6F, 0x72, 0x75, 0x6D, 0x20,
        0x65, 0x74, 0x20, 0x4D, 0x61, 0x6C, 0x6F, 0x72, 0x75, 0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20,
        0x75, 0x73, 0x65, 0x20, 0x69, 0x6E, 0x20, 0x61, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x73,
        0x70, 0x65, 0x63, 0x69, 0x6D, 0x65, 0x6E, 0x20, 0x62, 0x6F, 0x6F, 0x6B, 0x2E, 0x20, 0x49,
        0x74, 0x20, 0x75, 0x73, 0x75, 0x61, 0x6C, 0x6C, 0x79, 0x20, 0x62, 0x65, 0x67, 0x69, 0x6E,
        0x73, 0x20, 0x77, 0x69, 0x74, 0x68,
    ];
    input
}

#[test]
fn test_sha512_lorem_ipsum() {
    let msg = get_lorem_ipsum();
    let res = sha512(msg);

    assert!(res.len() == 64);

    assert!(*res[0] == 0xd5);
    assert!(*res[1] == 0xa2);
    assert!(*res[2] == 0xe1);
    assert!(*res[3] == 0x4e);
    assert!(*res[4] == 0xf4);
    assert!(*res[5] == 0x20);
    assert!(*res[6] == 0xf8);
    assert!(*res[7] == 0x2d);
    assert!(*res[8] == 0x68);
    assert!(*res[9] == 0x2b);
    assert!(*res[10] == 0x19);
    assert!(*res[11] == 0xc3);
    assert!(*res[12] == 0xd0);
    assert!(*res[13] == 0x70);
    assert!(*res[14] == 0xf4);
    assert!(*res[15] == 0x81);
    assert!(*res[16] == 0x14);
    assert!(*res[17] == 0xcb);
    assert!(*res[18] == 0xb9);
    assert!(*res[19] == 0x74);
    assert!(*res[20] == 0x7c);
    assert!(*res[21] == 0x7d);
    assert!(*res[22] == 0xb1);
    assert!(*res[23] == 0x15);
    assert!(*res[24] == 0xce);
    assert!(*res[25] == 0xa5);
    assert!(*res[26] == 0x41);
    assert!(*res[27] == 0x3e);
    assert!(*res[28] == 0xf8);
    assert!(*res[29] == 0xcb);
    assert!(*res[30] == 0x8f);
    assert!(*res[31] == 0xba);
    assert!(*res[32] == 0xc6);
    assert!(*res[33] == 0x90);
    assert!(*res[34] == 0x17);
    assert!(*res[35] == 0xc5);
    assert!(*res[36] == 0x17);
    assert!(*res[37] == 0x0f);
    assert!(*res[38] == 0x01);
    assert!(*res[39] == 0xc4);
    assert!(*res[40] == 0x77);
    assert!(*res[41] == 0xb3);
    assert!(*res[42] == 0xdf);
    assert!(*res[43] == 0x3d);
    assert!(*res[44] == 0xfb);
    assert!(*res[45] == 0x34);
    assert!(*res[46] == 0xd3);
    assert!(*res[47] == 0x50);
    assert!(*res[48] == 0x8f);
    assert!(*res[49] == 0xa0);
    assert!(*res[50] == 0xb2);
    assert!(*res[51] == 0xb1);
    assert!(*res[52] == 0x37);
    assert!(*res[53] == 0xd4);
    assert!(*res[54] == 0xcb);
    assert!(*res[55] == 0x54);
    assert!(*res[56] == 0x60);
    assert!(*res[57] == 0x9e);
    assert!(*res[58] == 0x63);
    assert!(*res[59] == 0x3d);
    assert!(*res[60] == 0x14);
    assert!(*res[61] == 0x45);
    assert!(*res[62] == 0x82);
    assert!(*res[63] == 0xc9);
}

#[test]
fn test_sha512_size_one() {
    let mut arr: Array<u8> = array![49];
    let mut res = sha512(arr);

    assert!(res.len() == 64);

    assert!(*res[0] == 0x4d);
    assert!(*res[1] == 0xff);
    assert!(*res[2] == 0x4e);
    assert!(*res[3] == 0xa3);
    assert!(*res[4] == 0x40);
    assert!(*res[5] == 0xf0);
    assert!(*res[6] == 0xa8);
    assert!(*res[7] == 0x23);
    assert!(*res[8] == 0xf1);
    assert!(*res[9] == 0x5d);
    assert!(*res[10] == 0x3f);
    assert!(*res[11] == 0x4f);
    assert!(*res[12] == 0x01);
    assert!(*res[13] == 0xab);
    assert!(*res[14] == 0x62);
    assert!(*res[15] == 0xea);
    assert!(*res[16] == 0xe0);
    assert!(*res[17] == 0xe5);
    assert!(*res[18] == 0xda);
    assert!(*res[19] == 0x57);
    assert!(*res[20] == 0x9c);
    assert!(*res[21] == 0xcb);
    assert!(*res[22] == 0x85);
    assert!(*res[23] == 0x1f);
    assert!(*res[24] == 0x8d);
    assert!(*res[25] == 0xb9);
    assert!(*res[26] == 0xdf);
    assert!(*res[27] == 0xe8);
    assert!(*res[28] == 0x4c);
    assert!(*res[29] == 0x58);
    assert!(*res[30] == 0xb2);
    assert!(*res[31] == 0xb3);
    assert!(*res[32] == 0x7b);
    assert!(*res[33] == 0x89);
    assert!(*res[34] == 0x90);
    assert!(*res[35] == 0x3a);
    assert!(*res[36] == 0x74);
    assert!(*res[37] == 0x0e);
    assert!(*res[38] == 0x1e);
    assert!(*res[39] == 0xe1);
    assert!(*res[40] == 0x72);
    assert!(*res[41] == 0xda);
    assert!(*res[42] == 0x79);
    assert!(*res[43] == 0x3a);
    assert!(*res[44] == 0x6e);
    assert!(*res[45] == 0x79);
    assert!(*res[46] == 0xd5);
    assert!(*res[47] == 0x60);
    assert!(*res[48] == 0xe5);
    assert!(*res[49] == 0xf7);
    assert!(*res[50] == 0xf9);
    assert!(*res[51] == 0xbd);
    assert!(*res[52] == 0x05);
    assert!(*res[53] == 0x8a);
    assert!(*res[54] == 0x12);
    assert!(*res[55] == 0xa2);
    assert!(*res[56] == 0x80);
    assert!(*res[57] == 0x43);
    assert!(*res[58] == 0x3e);
    assert!(*res[59] == 0xd6);
    assert!(*res[60] == 0xfa);
    assert!(*res[61] == 0x46);
    assert!(*res[62] == 0x51);
    assert!(*res[63] == 0x0a);
}

#[test]
fn test_size_zero() {
    let msg = array![];

    let res = sha512(msg);

    assert!(res.len() == 64);
    assert!(*res[0] == 0xcf);
    assert!(*res[1] == 0x83);
    assert!(*res[2] == 0xe1);
    assert!(*res[3] == 0x35);
    assert!(*res[4] == 0x7e);
    assert!(*res[5] == 0xef);
    assert!(*res[6] == 0xb8);
    assert!(*res[7] == 0xbd);
    assert!(*res[8] == 0xf1);
    assert!(*res[9] == 0x54);
    assert!(*res[10] == 0x28);
    assert!(*res[11] == 0x50);
    assert!(*res[12] == 0xd6);
    assert!(*res[13] == 0x6d);
    assert!(*res[14] == 0x80);
    assert!(*res[15] == 0x07);
    assert!(*res[16] == 0xd6);
    assert!(*res[17] == 0x20);
    assert!(*res[18] == 0xe4);
    assert!(*res[19] == 0x05);
    assert!(*res[20] == 0x0b);
    assert!(*res[21] == 0x57);
    assert!(*res[22] == 0x15);
    assert!(*res[23] == 0xdc);
    assert!(*res[24] == 0x83);
    assert!(*res[25] == 0xf4);
    assert!(*res[26] == 0xa9);
    assert!(*res[27] == 0x21);
    assert!(*res[28] == 0xd3);
    assert!(*res[29] == 0x6c);
    assert!(*res[30] == 0xe9);
    assert!(*res[31] == 0xce);
    assert!(*res[32] == 0x47);
    assert!(*res[33] == 0xd0);
    assert!(*res[34] == 0xd1);
    assert!(*res[35] == 0x3c);
    assert!(*res[36] == 0x5d);
    assert!(*res[37] == 0x85);
    assert!(*res[38] == 0xf2);
    assert!(*res[39] == 0xb0);
    assert!(*res[40] == 0xff);
    assert!(*res[41] == 0x83);
    assert!(*res[42] == 0x18);
    assert!(*res[43] == 0xd2);
    assert!(*res[44] == 0x87);
    assert!(*res[45] == 0x7e);
    assert!(*res[46] == 0xec);
    assert!(*res[47] == 0x2f);
    assert!(*res[48] == 0x63);
    assert!(*res[49] == 0xb9);
    assert!(*res[50] == 0x31);
    assert!(*res[51] == 0xbd);
    assert!(*res[52] == 0x47);
    assert!(*res[53] == 0x41);
    assert!(*res[54] == 0x7a);
    assert!(*res[55] == 0x81);
    assert!(*res[56] == 0xa5);
    assert!(*res[57] == 0x38);
    assert!(*res[58] == 0x32);
    assert!(*res[59] == 0x7a);
    assert!(*res[60] == 0xf9);
    assert!(*res[61] == 0x27);
    assert!(*res[62] == 0xda);
    assert!(*res[63] == 0x3e);
}
